--------------------------------------------------- Session Authentication --------------------------------------

Session Authentication scheme uses Django's default session backend for authentication. Session authentication is appropriate
for AJAX clients that are running in the same session context as your website.

If succesfully authenticated, SessionAuthentication provides the following credentials.

* request.user will be a Django User instance.
* request.auth will be a None.
Unauthenticated responses that are denied permission will result in an HTTP 403 Forbidden response


--> If using an AJAX style API with SessionAuthentication, you'll need to make sure you include a valid CSRF token for any
    "unsafe" HTTP method calls, such as PUT, PATCH, POST or DELETE requests
    


    Session Authentication has login and logout feature --> urls.py


* IsAuthenticatedOrReadOnly --> will allow authenticated users to perform any request. Requests for unauthorized users wil only be permitted if the
                                request method is one of the "safe" methods; GET,HEAD or OPTIONS


------------------------------------------- DjangoModelPermission -----------------------------------------------

This permission class ties into Django's standard django.contrib.auth model permissions. The permission must only be applied to views 
that have a queryset property set. Authorization will only be granted if the user is authenticated and has the relevant model permissions assigned. 


* POST requests require the user to have the add permission on the model.
* PUT and PATCH requests require the user to have the change permission on the model.
* DELETE requests require the user to have the delete permission on the model.
The default behaviour can also  be overridden to support custom model permissions.

For example, you might want to include a view model permission for GET requests.
--> To use custom model permissions, override DjangoModelPermissons and set the perms_map property

------------------------------------------- DjangoModelPermissionOrAnonReadOnly -----------------------------------------------
similar to djangomodelpermissions, but also allows unauthenticated users to have read-only access to API

------------------------------------------- DjangoObejctPermissions -----------------------------------------------
This  permission class ties into Django's standard object permissions framework that allows per-object permissions on models.
In order to use this permission class, you'll also need to add a permission backend that supports object-level permissions, such as django-guardian